name: Destroy ML Model Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destruction'
        required: true
        type: string
      destroy_ecr_images:
        description: 'Also delete ECR repository images'
        required: false
        default: false
        type: boolean

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  AWS_REGION: us-east-2
  PROJECT_NAME: ml-devops

jobs:
  validate-destroy-request:
    runs-on: ubuntu-latest
    outputs:
      should-destroy: ${{ steps.validate.outputs.should-destroy }}
    steps:
    - name: Validate Destroy Request
      id: validate
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Destruction cancelled. You must type 'DESTROY' to confirm."
          echo "should-destroy=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ Destruction confirmed. Proceeding with infrastructure destruction."
          echo "should-destroy=true" >> $GITHUB_OUTPUT
        fi

  destroy-infrastructure:
    needs: validate-destroy-request
    if: needs.validate-destroy-request.outputs.should-destroy == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: infrastructure

    - name: Terraform Init
      run: terraform init
      working-directory: infrastructure

    - name: Terraform Validate
      run: terraform validate
      working-directory: infrastructure

    - name: List Resources to be Destroyed
      run: |
        echo "üîç Listing resources that will be destroyed..."
        terraform plan -destroy -var="aws_region=${{ env.AWS_REGION }}" -var="project_name=${{ env.PROJECT_NAME }}" -var="environment=${{ github.event.inputs.environment }}" -out=tfplan
        echo "üìã Resources planned for destruction:"
        terraform show -no-color tfplan | grep -E "^-|~" || echo "No resources found to destroy"
      working-directory: infrastructure

    - name: Destroy Infrastructure
      run: |
        echo "üí• Destroying infrastructure for environment: ${{ github.event.inputs.environment }}"
        terraform destroy -auto-approve -var="aws_region=${{ env.AWS_REGION }}" -var="project_name=${{ env.PROJECT_NAME }}" -var="environment=${{ github.event.inputs.environment }}"
        echo "‚úÖ Infrastructure destruction completed"
      working-directory: infrastructure

    - name: Clean up ECR Images (Optional)
      if: github.event.inputs.destroy_ecr_images == 'true'
      run: |
        echo "üóëÔ∏è Cleaning up ECR repository images..."
        ECR_REPO="${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-ml-model"
        
        # Check if repository exists
        if aws ecr describe-repositories --repository-names $ECR_REPO --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "Found ECR repository: $ECR_REPO"
          
          # List and delete all images
          IMAGE_IDS=$(aws ecr list-images --repository-name $ECR_REPO --region ${{ env.AWS_REGION }} --query 'imageIds[*]' --output json)
          if [ "$IMAGE_IDS" != "[]" ]; then
            echo "Deleting all images from ECR repository..."
            aws ecr batch-delete-image --repository-name $ECR_REPO --image-ids "$IMAGE_IDS" --region ${{ env.AWS_REGION }}
            echo "‚úÖ ECR images deleted successfully"
          else
            echo "No images found in ECR repository"
          fi
        else
          echo "ECR repository $ECR_REPO not found or already deleted"
        fi

    - name: Verify Destruction
      run: |
        echo "üîç Verifying infrastructure destruction..."
        
        # Check ECS Cluster
        if aws ecs describe-clusters --clusters ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-cluster --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  ECS Cluster still exists"
        else
          echo "‚úÖ ECS Cluster destroyed"
        fi
        
        # Check ECR Repository
        if aws ecr describe-repositories --repository-names ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-ml-model --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  ECR Repository still exists"
        else
          echo "‚úÖ ECR Repository destroyed"
        fi
        
        # Check ALB
        if aws elbv2 describe-load-balancers --names ${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-alb --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  Application Load Balancer still exists"
        else
          echo "‚úÖ Application Load Balancer destroyed"
        fi
        
        # Check VPC
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-vpc" --query 'Vpcs[0].VpcId' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "None")
        if [ "$VPC_ID" != "None" ] && [ ! -z "$VPC_ID" ]; then
          echo "‚ö†Ô∏è  VPC still exists: $VPC_ID"
        else
          echo "‚úÖ VPC destroyed"
        fi

    - name: Clean up Terraform files
      if: always()
      run: |
        echo "üßπ Cleaning up local Terraform files..."
        cd infrastructure
        
        # Remove Terraform state files
        rm -f terraform.tfstate terraform.tfstate.backup tfplan
        
        # Remove .terraform directory
        rm -rf .terraform
        
        # Remove .terraform.lock.hcl
        rm -f .terraform.lock.hcl
        
        echo "‚úÖ Local Terraform files cleaned up"

  destroy-summary:
    needs: [validate-destroy-request, destroy-infrastructure]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Destruction Summary
      run: |
        echo "üìä Infrastructure Destruction Summary"
        echo "=================================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Project: ${{ env.PROJECT_NAME }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Timestamp: $(date -u)"
        echo ""
        
        if [ "${{ needs.destroy-infrastructure.result }}" == "success" ]; then
          echo "‚úÖ Infrastructure destruction completed successfully"
          echo ""
          echo "Destroyed resources:"
          echo "  - ECS Cluster and Service"
          echo "  - Application Load Balancer"
          echo "  - ECR Repository"
          echo "  - VPC and networking components"
          echo "  - IAM roles and policies"
          echo "  - CloudWatch resources"
          echo "  - Auto Scaling resources"
          echo ""
          echo "üí° You can now redeploy infrastructure using the main deployment workflow"
        else
          echo "‚ùå Infrastructure destruction failed or was cancelled"
          echo ""
          echo "üîç Check the logs above for details on what went wrong"
          echo "üí° You may need to manually clean up resources in the AWS Console"
        fi
